包名 Kid.组件

@外部Java文件("../../../../依赖库/Java/PngView.java")
@导入Java("com.ht.hz.PngView")
@全局类
类 画板:可视化组件
	
	属性写 设置画笔大小(大小: 整数 =20)
      code getView().setSize(#大小);
    结束 属性

   属性写 设置文字大小(大小: 整数 = 50)
      code getView().setTextSize(#大小);
   结束 属性

   属性写 设置画笔颜色(颜色: 文本 = "#ff000000")
      code getView().setColor(#颜色);
   结束 属性

	@code
    public #<画板>(android.content.Context context) {
        super(context);
    }

    @Override
    public PngView onCreateView(android.content.Context context) {
        PngView view = new PngView(context);
		view.setTouchEvent(new PngView.TouchEvent(){

         @Override
         public void move(float x, float y) {
            #滑动事件((int)x,(int)y);
         }
         });
        return view;
    }
	
    @Override
    public PngView getView() {
        return (PngView) view;
    }
    @end
	
	方法 开始涂鸦()
    code getView().start();
   结束 方法
   
   方法 停止涂鸦()
    code getView().suppress();
   结束 方法
   
   方法 清空画板()
      code getView().clear();
   结束 方法
   
   方法 画图片(图片路径: 文本,x: 整数,y: 整数)
     code getView().drawBitmap(#图片路径,#x,#y);
   结束 方法

	方法 设置文字颜色(颜色: 整数)
      code getView().setTextColor(#颜色);
   结束 方法
   
	
   方法 添加文本(文本: 文本,x: 整数,y: 整数)
      code getView().addText(#文本,#x,#y);
   结束 方法
   
   方法 画实心点(大小:整数 = 10, 颜色 : 文本 ="#ff000000" , X轴 : 整数 , Y轴 : 整数)
   	code getView().hd(#大小,#颜色,#X轴,#Y轴);
   结束 方法

   方法 写出图片(路径: 文本)
      code getView().save(#路径);
   结束 方法
   
   @虚拟事件
   方法 滑动事件(x: 整数,y: 整数)
   结束 方法


  方法 画直线(起点x: 整数, 起点y: 整数, 终点x : 整数, 终点y: 整数, 线条宽度 : 整数 = 5,颜色 : 文本 = "#ff000000")
	  code getView().hx(#起点x,#起点y,#终点x,#终点y,#线条宽度,#颜色);
   结束 方法

	方法 画实心矩形(起点x: 整数, 起点y: 整数, 终点x : 整数, 终点y: 整数,颜色 : 文本 = "#ff000000")
	   code getView().hsxjx(#起点x,#起点y,#终点x,#终点y,#颜色);
   结束 方法
   
   方法 画空心矩形(起点x: 整数, 起点y: 整数, 终点x : 整数, 终点y: 整数, 粗细 : 整数 = 5, 颜色 : 文本 = "#ff000000")
	   code getView().hkxjx(#起点x,#起点y,#终点x,#终点y,#粗细,#颜色);
   结束 方法
   
   
  方法 画实心圆(起点x: 整数, 起点y: 整数, 半径 : 整数,颜色 : 文本 = "#ff000000")
	   code getView().sxy(#起点x,#起点y,#半径,#颜色);
   结束 方法
   
   方法 画空心圆(起点x: 整数, 起点y: 整数, 半径 : 整数,粗细 : 整数 = 5,颜色 : 文本 = "#ff000000")
	   code getView().kxy(#起点x,#起点y,#半径,#粗细,#颜色);
   结束 方法
   
   /*
   
   依次输入多个xy点
   第一个参数为画笔粗细
   第二个参数为画笔颜色，如#FF000000
   第三个开始，分别是起点XY
   请输入至少6个长度数值
   也就是三个点的xy
   */
   方法 画空心多边形(粗细 : 整数,颜色 : 文本 = "#ff000000",多点xy : 整数[])
		code getView().空心多边(#粗细,#颜色,#多点xy);
	结束 方法
	
	/*
   依次输入多个xy点
   第一个参数为起点X
   第二个参数为起点y
   第三个参数为第二个起点x
   以此类推
   请输入至少6个长度数值
   也就是三个点的xy
   */
   方法 画实心多边形(多点xy : 整数[])
		code getView().实心多边(#多点xy);
	结束 方法
	
	/*
	第一个参数为线条粗细
	第二个参数为#开头颜色
	第三个参数为开始的角度
	第四个为画多少度，360是圆
	第五个为画笔起终点xy，数组须四个整数
	*/
	方法 空心扇形(粗细 : 整数 = 3, 颜色 : 文本 = "#ff000000", 开始角度 : 整数, 画多少度 : 整数, 画笔xy : 整数[])
		code getView().空心扇形(#粗细,#颜色,#开始角度,#画多少度,#画笔xy);
	结束 方法
	
	/*
	第一个参数为#开头颜色
	第二个参数为开始的角度
	第三个为画多少度，360是圆
	第四个为画笔起终点xy，数组须四个整数
	*/
	方法 实心扇形(颜色 : 文本 = "#ff000000", 开始角度 : 整数, 画多少度 : 整数, 画笔xy : 整数[])
		code getView().实心扇形(#颜色,#开始角度,#画多少度,#画笔xy);
	结束 方法
	
	/*
	第一个参数为线条粗细
	第二个参数为#开头颜色
	第三个参数为开始的角度
	第四个为画多少度，360是圆
	第五个为画笔起终点xy，数组须四个整数
	*/
	方法 空心弧形(粗细 : 整数 = 3, 颜色 : 文本 = "#ff000000", 开始角度 : 整数, 画多少度 : 整数, 画笔xy : 整数[])
		code getView().空心弧形(#粗细,#颜色,#开始角度,#画多少度,#画笔xy);
	结束 方法
	
	 /*
	第一个参数为#开头颜色
	第二个参数为开始的角度
	第三个为画多少度，360是圆
	第四个为画笔起终点xy，数组须四个整数
	*/
	方法 实心弧形(颜色 : 文本 = "#ff000000", 开始角度 : 整数, 画多少度 : 整数, 画笔xy : 整数[])
		code getView().实心弧形(#颜色,#开始角度,#画多少度,#画笔xy);
	结束 方法
	
	/*
	第一个参数为线条粗细
	第二个参数为圆角度数
	第三个参数为颜色
	第四个参数为起点x
	第五个参数为起点y
	第六个参数为终点x
	第七个参数为终点y
	*/
	方法 空心圆角矩形(粗细 : 整数 = 5, 圆角度数 : 整数 = 10, 颜色 : 文本 = "#ff000000", 起点x : 整数, 起点y: 整数, 终点x : 整数, 终点y : 整数)
		code getView().空心圆角矩形(#粗细,#圆角度数,#颜色,#起点x,#起点y,#终点x,#终点y);
	结束 方法
	
	
	
	
	/*
	第一个参数为圆角度数
	第二个参数为颜色
	第三个参数为起点x
	第四个参数为起点y
	第五个参数为终点x
	第六个参数为终点y
	*/
	方法 实心圆角矩形(圆角度数 : 整数 = 10, 颜色 : 文本 = "#ff000000", 起点x : 整数, 起点y: 整数, 终点x : 整数, 终点y : 整数)
		code getView().实心圆角矩形(#圆角度数,#颜色,#起点x,#起点y,#终点x,#终点y);
	结束 方法
	
	/*
	参数1为曲线粗细，只在闭合假生效
	参数2为颜色
	参数3为起点x
	参数4为起点y
	参数5为中心过度点x
	参数6为中心过度点y
	参数7为终点x
	参数8为终点y
	参数9为是否闭合成整体
	*/
	方法 贝塞尔(粗细 : 整数 = 0 , 颜色 : 文本 = "#ff000000" , 起点x : 整数 , 起点y : 整数 , 中心点x :整数 ,中心点y :整数 ,终点x :整数, 终点y : 整数 , 闭合 : 逻辑型 = 假)
		code getView().贝塞尔曲线(#粗细,#颜色,#起点x,#起点y,#中心点x,#中心点y,#终点x,#终点y,#闭合);
	结束 方法
	
	
   

结束 类