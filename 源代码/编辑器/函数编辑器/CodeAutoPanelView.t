@强制输出
@导入Java("android.view.View")
@导入Java("android.graphics.Rect")
类 CodeAutoPanelView : 可视化组件

	@隐藏
	@输出名("Layout")
	变量 Layout : CodeAutoPanelViewLayout?

	@code
	public #<CodeAutoPanelView>(android.content.Context context) {
        super(context);
		#初始化();
    }

    @Override
    public View onCreateView(android.content.Context context) {
	    Layout = new #<CodeAutoPanelViewLayout>(context);
		view = Layout.getLayout().getView();
        return view;
    }
	
    @Override
    public View getView() {
        return (View) view;
    }
    @end

	@隐藏
	变量 安卓环境名称 : 安卓环境?
	@隐藏
	变量 安卓窗口名称 : 安卓窗口?
	@隐藏
	变量 代码框 : CodeEditorView?
	@隐藏
	变量 mCodeAutoPanel : CodeAutoPanel?

	@隐藏
	变量 补全内容列表 : JSON数组
	@隐藏
	变量 最近输入合成 : 文本

	@隐藏
	变量 设置_设定 : 设置_设定

	//初始化补全
	@隐藏
	方法 初始化()
		//设置面板圆角
		如果 设置_设定.获取开关("NightMode") 则
			组件样式操作.置圆角背景边框(Layout.线性布局2,0XFF222222,2,0XFF333333,15,15,15,15)
			否则
				组件样式操作.置圆角背景边框(Layout.线性布局2,0xF0FFFFFF,2,0xFF7A7572,15,15,15,15)
		结束 如果
		//设置进度圈
		Layout.进度圈1.颜色 = 0XFF000000
		//初始化最近输入合成
		最近输入合成 = ""
		//隐藏面板
		补全面板开关(假)
		//触摸
		事件 Layout.线性布局1:被触摸(来源事件 : 触摸事件) : 逻辑型
			//光标切换到其他位置关闭补全面板
			补全面板开关(假)
			//载入事件
			代码框被触摸()
			返回 假
		结束 事件
	结束 方法

	@隐藏
	方法 初始化2()
		//输入
		事件 代码框:最近输入(输出 : 文本)
			//检测是否有字符，没有则关闭
			如果 输出.替换(" ","") == "" || 输出.替换("\n","") == "" 则
				补全面板开关(假)
			否则
				如果 输出.替换(" "," ") ? " " 则
					补全面板开关(假)
				否则
					如果 输出.替换("	","	") ? "	" 则
						补全面板开关(假)
					否则
						最近输入合成 = 最近输入合成 + 输出
						mCodeAutoPanel.设置最近输入内容(最近输入合成)
						补全面板开关(真)
					结束 如果
				结束 如果
			结束 如果
			被插入删除()
		结束 事件
		//删除
		事件 代码框:最近删除(删除 : 文本)
			最近输入合成 = 最近输入合成.取文本中间(最近输入合成.长度,最近输入合成.长度-1)
			mCodeAutoPanel.设置最近输入内容(最近输入合成)
			如果 删除.替换(" ","") == "" 则
				补全面板开关(假)
			否则
				如果 删除.替换("	","	") ? "	"  则
					补全面板开关(假)
				否则
					如果 删除.替换("\n","") == "" 则
						补全面板开关(假)
					否则
						补全面板开关(真)
					结束 如果
				结束 如果
			结束 如果
			被插入删除()
		结束 事件
	结束 方法

	@隐藏
	方法 初始化3()
		//初始化补全列表
		mCodeAutoPanel = 新建窗口组件(CodeAutoPanel,安卓环境名称)
		mCodeAutoPanel.设置组件容器名(Layout)
		mCodeAutoPanel.设置列表(Layout.自定义列表框1)
		//列表被点击
		事件 mCodeAutoPanel:列表被点击()
			补全面板开关(假)
		结束 事件
	结束 方法

	//设置初始化窗口
	方法 设置窗口(窗口名 : 安卓窗口)
		安卓窗口名称 = 窗口名
	结束 方法

	//设置初始化环境
	方法 设置环境(环境名 : 安卓环境)
		安卓环境名称 = 环境名
		初始化3()
	结束 方法

	//设置代码编辑框
	方法 设置代码框(代码框名 : CodeEditorView)
		代码框 = 代码框名
		初始化2()
		mCodeAutoPanel.设置代码框(代码框)
	结束 方法

	//添加补全
	方法 添加补全(图片 : 文本,名称 : 文本,补全内容 : 文本,类型 : 文本,描述 : 文本,格式 : 文本 = "")
		//json
		变量 json : JSON对象
		json["Icon"] = 图片
		json["Name"] = 名称
		json["Complement"] = 补全内容
		json["Type"] = 类型
		json["Describe"] = 描述
		json["Format"] = 格式
		//json list
		补全内容列表.置入(json)
	结束 方法

	//清空补全
	方法 清空补全()
		补全内容列表 = "[]"
	结束 方法

	//获取当前行的内容
	方法 获取当前行() : 文本
		变量 当前行的位置 : 整数 = 代码框.获取当前行的位置
		返回 代码框.获取当前行的文本(当前行的位置)
	结束 方法

	//设置补全面板是否显示
	@隐藏
	方法 补全面板开关(状态 : 逻辑型)
		如果 状态 则
			//显示面板
			Layout.线性布局1.可视 = 真
			//
			mCodeAutoPanel.列表(简单过滤(最近输入合成))
			//
			补全和输入法间隔()
		否则
			//隐藏面板
			Layout.线性布局1.可视 = 假
			//重置最近输入合成
			最近输入合成 = ""
			//补全列表被关闭事件
			补全列表被关闭()
		结束 如果
	结束 方法

	//简单过滤算法
	@隐藏
	方法 简单过滤(内容 : 文本) : JSON数组
		变量 JSON_L : JSON数组
		循环(i, 0, 补全内容列表.长度)
			变量 JSON : JSON对象 = 补全内容列表[i]
			变量 Name : 文本 = JSON["Name"]
			变量 Describe : 文本 = JSON["Describe"]
			如果 Name ? 内容 则
				JSON_L.置入(JSON)
			否则
				如果 Describe ? 内容 则
					JSON_L.置入(JSON)
				结束 如果
			结束 如果
		结束 循环
		返回 JSON_L
	结束 方法

	//计算补全列表与输入法的间隔
	方法 补全和输入法间隔()
		变量 光标Y : 单精度小数 = 代码框.获取光标Y轴
		变量 光标Y2 : 小数 = 光标Y - 代码框.获取当前行的位置 / 50.0 - 代码框.获取偏移量Y
		变量 光标YS : 小数 = 光标Y2 + 输入法高度(安卓窗口名称)
		变量 光标YSS : 整数 = 光标YS.到整数() / 100
		Layout.线性布局1.下内边距 = 光标YSS
		Layout.自定义列表框1.滚动至(0)
	结束 方法

	//获取输入法高度
	@隐藏
	方法 输入法高度(窗口 : 安卓窗口):整数
		@code
		Rect rect = new Rect();
  	  View root = #窗口.getWindow().getDecorView();
  	  root.getWindowVisibleDisplayFrame(rect);
 	   int screenHeight = root.getHeight();
 	   int visibleHeight = rect.bottom - rect.top;
    	return screenHeight - visibleHeight;
		@end
	结束 方法

	定义事件 代码框被触摸()
	定义事件 被插入删除()
	定义事件 补全列表被关闭()

结束 类

@导入Java("android.os.Bundle")
@导入Java("java.io.IOException")
@导入Java("android.content.res.AssetManager")
@导入Java("java.io.InputStream")
@导入Java("android.graphics.drawable.Drawable")
类 CodeAutoPanel : 组件容器

	@隐藏
	变量 组件布局名 : CodeAutoPanelViewLayout
	@隐藏
	变量 列表框名 : 自定义列表框
	@隐藏
	变量 代码框 : CodeEditorView?
	@隐藏
	变量 列表集合 : 文本集合

	@隐藏
	变量 最近输入内容 : 文本 = ""

	//设置布局
	方法 设置组件容器名(布局名 : CodeAutoPanelViewLayout)
		组件布局名 = 布局名
	结束 方法

	//设置列表
	方法 设置列表(列表框 : 自定义列表框)
		列表框名 = 列表框
	结束 方法

	//设置代码编辑框
	方法 设置代码框(代码框名 : CodeEditorView)
		代码框 = 代码框名
	结束 方法

	方法 设置最近输入内容(内容 : 文本)
		最近输入内容 = 内容
	结束 方法

	//加载补全列表
	方法 列表(JSON_LIST : JSON数组)
		//清空与初始化
		组件布局名.进度圈1.可视 = 真
		列表集合.清空()
		//测试
		循环(i, 0, JSON_LIST.长度)
			列表集合.添加成员(JSON_LIST[i].到文本())
		结束 循环
		//加载列表
		事件 列表框名:加载布局(索引 : 整数,项目布局 : 组件容器) : 组件容器
			变量 布局 : AutoCompletePanelList?
			如果 项目布局 == 空 则
				布局 = 创建 AutoCompletePanelList
			否则
				布局 = 项目布局
			结束 如果
			//
			变量 json : JSON对象 = 列表集合[索引]
			资源目录图片(取安卓环境(),布局.图片框1,json["Icon"].到文本())
			布局.文本框1.内容 = json["Name"]
			布局.文本框2.内容 = json["Type"]
			布局.文本框3.内容 = json["Describe"]
			//列表被点击
			事件 布局.线性布局2:被单击()
				插入(json["Complement"].到文本())
				列表被点击()
			结束 事件
			//列表被长按
			事件 布局.线性布局2:被长按()
				变量 倒计时 : 倒计时器
				布局.线性布局8.可视 = 真
				布局.文本框4.内容 = json["Format"].到文本()
				倒计时.开始倒计时(1000L,1000L)
				事件 倒计时:倒计时结束()
					布局.线性布局8.可视 = 假
				结束 事件
			结束 事件
			//
			组件布局名.进度圈1.可视 = 假
			返回 布局
		结束 事件
		//更新列表
		列表框名.更新项目(列表集合.长度)
		//其他
		变量 数量 : 整数 = 列表集合.长度
		计算高度(数量)
		计算位置()
	结束 方法

	@隐藏
	方法 插入(内容 : 文本)
		//变量
		变量 数量 : 整数 = 内容.长度
		变量 最近输入数量 : 整数 = 最近输入内容.长度
		//关闭撤销功能
		代码框.设置开启撤销(假)
		//删除
		变量 当前行 : 整数 = 代码框.获取当前行的位置
		变量 当前行光标 : 整数 = 代码框.获取当前行的光标位置
		变量 当前光标位置 : 整数 = 代码框.获取字符索引(当前行,当前行光标)
		代码框.删除字符(当前光标位置-最近输入数量,当前光标位置)
		//开启撤销功能
		代码框.设置开启撤销(真)
		//插入内容
		代码框.插入文本(内容,数量)
	结束 方法

	@隐藏
	方法 项目数量(数量 : 整数)
		如果 数量 <= 0 则
			组件布局名.线性布局2.可视 = 假
		否则
			组件布局名.线性布局2.可视 = 真
		结束 如果
	结束 方法

	@隐藏
	方法 计算位置()
		//设置竖坐标
		变量 光标Y : 单精度小数 = 代码框.获取光标Y轴
		变量 光标Y2 : 小数 = 光标Y - 代码框.获取当前行的位置 / 50.0 - 代码框.获取偏移量Y
		变量 光标YS : 小数 = 光标Y2 + 20.0
		组件布局名.线性布局2.纵坐标 = 光标YS
	结束 方法

	@隐藏
	方法 计算高度(数量 : 整数)
		如果 数量 >= 5 则
			组件布局名.线性布局2.高度DP = 200
		否则
			组件布局名.线性布局2.高度DP = 数量 * 40
		结束 如果
	结束 方法

	@隐藏
	方法 资源目录图片(窗口环境 : 安卓环境,图片名称 : 图片框,图片路径 : 文本)
		@code
		// 使用 AssetManager 加载图片
		try {
 		   // 获取 AssetManager 对象
 		   AssetManager assetManager = #窗口环境.getAssets();
  		  // 打开指定的图片文件
  		  InputStream inputStream = assetManager.open(#图片路径);
  		  // 将输入流转换为 Drawable 并设置给 ImageView
  		  Drawable drawable = Drawable.createFromStream(inputStream, null);
  		  #图片名称.getView().setImageDrawable(drawable);
  		  // 关闭输入流
 		   inputStream.close();
		} catch (IOException e) {
 		   e.printStackTrace();
		}
		@end
	结束 方法

	定义事件 列表被点击()

结束 类

类 CodeAutoPanelViewLayout : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度=-1,对齐方式=49]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度=-1,高度DP=40,背景颜色=-1,@左外边距DP=15,@右外边距DP=15]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=49]])
	变量 线性布局4 : 线性布局
	@布局配置([[父布局=线性布局4,宽度=-1,高度=-1,分割线高度=1,@下外边距=0]])
	变量 自定义列表框1 : 自定义列表框
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388661]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,宽度DP=20,高度DP=20,@左外边距DP=0,@上外边距DP=5,@右外边距DP=5]])
	变量 进度圈1 : 进度圈

结束 类

类 AutoCompletePanelList : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度=-2,纵向布局=真]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度=-1,高度DP=40,对齐方式=8388627,水波纹效果=真]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,高度DP=40,宽度DP=40,对齐方式=17]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,宽度DP=25,高度DP=25]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=线性布局2,宽度=-1,高度=-1,纵向布局=真]])
	变量 线性布局4 : 线性布局
	@布局配置([[父布局=线性布局4,宽度=-1,高度DP=25]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局5 : 线性布局
	@布局配置([[父布局=线性布局5,字体大小=13,字体颜色=-16777216,粗体=真,内容="public",对齐方式=8388627]])
	变量 文本框1 : 文本框
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局6 : 线性布局
	@布局配置([[父布局=线性布局6,字体大小=13,字体颜色=-9806767,粗体=假,内容="Keyword",对齐方式=8388627,@右外边距DP=5,斜体=真]])
	变量 文本框2 : 文本框
	@布局配置([[父布局=线性布局4,宽度=-1,高度DP=15,对齐方式=8388627]])
	变量 线性布局7 : 线性布局
	@布局配置([[父布局=线性布局7,字体大小=10,字体颜色=-9806767,内容="Description of the keyword"]])
	变量 文本框3 : 文本框
	@布局配置([[父布局=线性布局1,宽度=-1,高度=-2,可视=假]])
	变量 线性布局8 : 线性布局
	@布局配置([[父布局=线性布局8,@左外边距DP=10,@上外边距DP=5,@下外边距DP=5,@右外边距DP=10,字体大小=10]])
	变量 文本框4 : 文本框

	变量 设置_设定 : 设置_设定

	事件 AutoCompletePanelList:创建完毕()
		如果 设置_设定.获取开关("NightMode") 则
			文本框1.字体颜色 = 0XFFFFFFFF
		结束 如果
	结束 事件

结束 类