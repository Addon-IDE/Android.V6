类 编辑器_函数编辑器_文件模块 : 组件容器

	//声明
	变量 设置_设定 : 设置_设定

	变量 文本框名称 : 文本框?
	变量 列表框名称 : 自定义列表框?

	变量 列表集合 : 文本集合
	变量 结束集合 : 文本集合
	变量 列表集合数量 : 文本集合

	//变量
	变量 刷新 : 逻辑型 = 假
	变量 活动路径 : 文本
	变量 项目路径 : 文本

	//设置
	方法 设置路径输出(文本框名 : 文本框)
		文本框名称 = 文本框名
	结束 方法
	方法 设置列表框(列表名 : 自定义列表框)
		列表框名称 = 列表名
	结束 方法
	//设置路径
	方法 设置路径(项目 : 文本,活动 : 文本)
		项目路径 = 项目
		活动路径 = 活动
	结束 方法

	//刷新
	方法 刷新(值 : 逻辑型)
		刷新 = 值
		文件列表()
	结束 方法

	//加载核心文件列表
	方法 文件列表()
		如果 刷新 则
			列表集合 = 文件操作.取子文件集合(活动路径)
			列表框名称.更新项目(列表集合.长度)
		否则
			//加载自定义列表
			事件 列表框名称:加载布局(索引 : 整数,项目布局 : 组件容器) : 组件容器
				变量 布局 : 编辑器_函数编辑器_文件列表?
				如果 项目布局 == 空 则
					布局 = 创建 编辑器_函数编辑器_文件列表
				否则
					布局 = 项目布局
				结束 如果
				//显示到列表
				变量 文件路径 : 文本 = 列表集合[索引]
				//设置布局内容
				如果 是否为目录(文件路径) 则
					布局.图片框1.图片资源 = 编辑器_函数编辑器_资源.文件夹
					布局.文本框1.内容 = 取文件名(文件路径)
					列表集合数量 = 文件操作.取子文件集合(文件路径)
					布局.文本框2.内容 = 取文件修改时间(文件路径) + " - " + 列表集合数量.长度 + "项"
				否则
					文件列表类型图标(布局.图片框1,文件路径)
					布局.文本框1.内容 = 取文件名(文件路径)
					布局.文本框2.内容 = 取文件修改时间(文件路径) + " - " + 其他_转换.转换文件大小(取文件大小(文件路径))
				结束 如果
				//列表被点击
				事件 布局.线性布局1:被单击()
					如果 是否为目录(文件路径) 则
						活动路径 = 文件路径
						刷新(真)
						文件列表()
						否则
							文件被点击(文件路径)
					结束 如果
				结束 事件	
				//列表被长按
				事件 布局.线性布局1:被长按()
					文件操作(文件路径)
				结束 事件	
				返回 布局
			结束 事件
			列表集合 = 文件操作.取子文件集合(活动路径)
			列表框名称.更新项目(列表集合.长度)
		结束 如果
		//设置文本框路径
		文本框名称.内容 = 转换路径()
	结束 方法

	//设置编辑框搜索
	方法 编辑框搜索(编辑框名 : 编辑框)
		事件 编辑框名:内容被改变()
			列表集合 = 文件列表搜索(文件操作.取子文件集合(活动路径),编辑框名.内容)
			列表框名称.更新项目(列表集合.长度)
		结束 事件
	结束 方法

	//返回上一级
	方法 返回上一级()
		如果 活动路径 == 项目路径 则
		否则
			变量 wj : 文件 = 活动路径
			变量 flj : 文本 = wj.取父目录路径()
			活动路径 = flj
			刷新(真)
			文件列表()
		结束 如果
	结束 方法

	//设置文件类型列表图标
	@隐藏
	方法 文件列表类型图标(图片框名称 : 图片框,路径 : 文本)
		//变量
		变量 文件后缀 : 文本 = 文件操作.取文件后缀名(路径)
		变量 路径后缀 : 文本 = 文件后缀.到小写()
		//设置图标
		如果 路径后缀 == "png" || 路径后缀 == "jpg"
			图片框名称.图片路径 = 路径
		否则 路径后缀 == "mcfunction"
			图片框名称.图片资源 = 编辑器_函数编辑器_资源.函数文件
		否则
			图片框名称.图片资源 = 编辑器_函数编辑器_资源.未知文件
		结束 如果
	结束 方法

	//搜索
	@隐藏
	方法 文件列表搜索(项目集合 : 文本集合,搜索内容 : 文本) : 文本集合
		结束集合.清空()
		循环(项目集合 -> 项目)
			如果 项目.到文本() ? 搜索内容 则
				结束集合.添加成员(项目)
			结束 如果
		结束 循环
		返回 结束集合
	结束 方法

	//将全路径转换为短路径
	方法 转换路径() : 文本
		返回 "root" + 活动路径.替换(项目路径,"")
	结束 方法

	//新建
	方法 新建()
		//对话框
		变量 新建菜单 : DX基础对话框
		如果 设置_设定.获取开关("NightMode") 则
			新建菜单.主题(DX主题.暗色)
		结束 如果
		新建菜单.标题("新建")
		新建菜单.内容("请选择类型...")
		新建菜单.按钮1("函数文件")
		新建菜单.按钮2("文件夹")
		新建菜单.按钮3("取消")
		新建菜单.显示()
		//函数文件
		事件 新建菜单:按钮1被单击() : 逻辑型
			新建文件()
			返回 假
		结束 事件
		//文件夹
		事件 新建菜单:按钮2被单击() : 逻辑型
			新建文件夹()
			返回 假
		结束 事件
		//关闭
		事件 新建菜单:按钮3被单击() : 逻辑型
			新建菜单.关闭()
			返回 假
		结束 事件
	结束 方法

	//新建函数文件
	方法 新建文件()
		//对话框
		变量 新建菜单 : DX输入对话框
		新建菜单.样式(DX样式.MIUI)
		如果 设置_设定.获取开关("NightMode") 则
			新建菜单.主题(DX主题.暗色)
		结束 如果
		新建菜单.标题("创建函数文件")
		新建菜单.内容("创建函数文件\n无需输入后缀名")
		新建菜单.自动弹出键盘(假)
		新建菜单.按钮1("创建")
		新建菜单.按钮2("取消")
		新建菜单.显示()
		//创建
		事件 新建菜单:按钮1被单击(文本 : 文本) : 逻辑型
			变量 编辑内容 : 文本 = 新建菜单.取输入内容
			如果 编辑内容.替换(" ","") == "" 则
				弹出警告提示("不能为空！")
			否则
				变量 path : 文本 = 活动路径 + "/" + 编辑内容 + ".mcfunction"
				如果 文件是否存在(path) 则
					弹出警告提示("当前目录有相同文件！")
				否则
					写出文本文件(path,"")
					弹出成功提示("创建成功！")
					刷新(真)
					文件列表()
				结束 如果
			结束 如果
			返回 假
		结束 事件
		//取消
		事件 新建菜单:按钮2被单击(文本 : 文本) : 逻辑型
			新建菜单.关闭()
			返回 假
		结束 事件
	结束 方法

	//新建文件夹
	方法 新建文件夹()
		//对话框
		变量 新建菜单 : DX输入对话框
		新建菜单.样式(DX样式.MIUI)
		如果 设置_设定.获取开关("NightMode") 则
			新建菜单.主题(DX主题.暗色)
		结束 如果
		新建菜单.标题("创建文件夹")
		新建菜单.内容("创建文件夹\n支持多级创建[/]")
		新建菜单.自动弹出键盘(假)
		新建菜单.按钮1("创建")
		新建菜单.按钮2("取消")
		新建菜单.显示()
		//创建
		事件 新建菜单:按钮1被单击(文本 : 文本) : 逻辑型
			变量 编辑内容 : 文本 = 新建菜单.取输入内容
			如果 编辑内容.替换(" ","") == "" 则
				弹出警告提示("不能为空！")
			否则
				变量 path : 文本 = 活动路径 + "/" + 编辑内容
				变量 path2 : 文本 = path + "/null"
				如果 文件是否存在(path) 则
					弹出警告提示("当前目录有相同文件夹！")
				否则
					写出文本文件(path2,"")
					删除文件(path2)
					弹出成功提示("创建成功！")
					刷新(真)
					文件列表()
				结束 如果
			结束 如果
			返回 假
		结束 事件
		//取消
		事件 新建菜单:按钮2被单击(文本 : 文本) : 逻辑型
			新建菜单.关闭()
			返回 假
		结束 事件
	结束 方法

	//文件操作
	方法 文件操作(路径 : 文本)
		//对话框
		变量 操作菜单 : DX基础对话框
		如果 设置_设定.获取开关("NightMode") 则
			操作菜单.主题(DX主题.暗色)
		结束 如果
		操作菜单.标题("文件操作")
		操作菜单.内容("对此文件(夹)进行操作：\n" + 取文件名(路径))
		操作菜单.按钮1("重命名")
		操作菜单.按钮2("删除")
		操作菜单.按钮3("取消")
		操作菜单.显示()
		//重命名
		事件 操作菜单:按钮1被单击() : 逻辑型
			重命名(路径)
			返回 假
		结束 事件
		//删除
		事件 操作菜单:按钮2被单击() : 逻辑型
			删除(路径)
			返回 假
		结束 事件
		//关闭
		事件 操作菜单:按钮3被单击() : 逻辑型
			操作菜单.关闭()
			返回 假
		结束 事件
	结束 方法

	//重命名
	方法 重命名(路径 : 文本)
		//对话框
		变量 操作菜单 : DX输入对话框
		操作菜单.样式(DX样式.MIUI)
		如果 设置_设定.获取开关("NightMode") 则
			操作菜单.主题(DX主题.暗色)
		结束 如果
		操作菜单.标题("重命名")
		操作菜单.内容("重命名为新名字")
		操作菜单.输入内容(取文件名(路径))
		操作菜单.自动弹出键盘(假)
		操作菜单.按钮1("重命名")
		操作菜单.按钮2("取消")
		操作菜单.显示()
		//确定
		事件 操作菜单:按钮1被单击(文本 : 文本) : 逻辑型
			变量 编辑内容 : 文本 = 操作菜单.取输入内容
			变量 wj : 文件 = 路径
			变量 flj : 文本 = wj.取父目录路径()
			变量 新路径 : 文本 = flj + "/" + 编辑内容
			如果 重命名文件(路径,新路径) 则
				弹出成功提示("重命名成功")
				刷新(真)
				文件列表()
			否则
				弹出错误提示("重命名失败！")
			结束 如果
			操作菜单.关闭()
			返回 假
		结束 事件
		//取消
		事件 操作菜单:按钮2被单击(文本 : 文本) : 逻辑型
			操作菜单.关闭()
			返回 假
		结束 事件
	结束 方法

	//删除
	方法 删除(路径 : 文本)
		//对话框
		变量 操作菜单 : DX基础对话框
		如果 设置_设定.获取开关("NightMode") 则
			操作菜单.主题(DX主题.暗色)
		结束 如果
		操作菜单.标题("删除文件")
		操作菜单.内容("对此文件(夹)进行操作：\n" + 取文件名(路径))
		操作菜单.按钮1("删除")
		操作菜单.按钮2("取消")
		操作菜单.显示()
		//删除
		事件 操作菜单:按钮1被单击() : 逻辑型
			如果 删除文件(路径) 则
				弹出成功提示("删除成功！")
				刷新(真)
				文件列表()
			否则
				弹出错误提示("删除失败！")
			结束 如果
			返回 假
		结束 事件
		//关闭
		事件 操作菜单:按钮2被单击() : 逻辑型
			操作菜单.关闭()
			返回 假
		结束 事件
	结束 方法
	
	定义事件 文件被点击(路径 : 文本)

结束 类