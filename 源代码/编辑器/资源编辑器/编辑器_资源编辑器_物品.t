类 编辑器_资源编辑器_物品 : 窗口

	@布局配置([[根布局=真,宽度=-1,高度=-1]])
	变量 自适应布局1 : 自适应布局
	@布局配置([[父布局=自适应布局1,宽度=-1,高度=-1,@横坐标比例=-9.0E-4,@纵坐标比例=-4.0E-4,纵向布局=真]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度=-1,高度DP=50,背景颜色=-1,纵向布局=假]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,宽度DP=50,高度DP=50,对齐方式=17]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,宽度DP=25,高度DP=25,图片资源="../../../../资源库/图标/back/default_backicon.png",水波纹效果=真,可获取焦点=真]])
	变量 退出界面 : 图片框
	@布局配置([[父布局=线性布局2,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,高度DP=50,对齐方式=8388627,宽度=-1]])
	变量 线性布局6 : 线性布局
	@布局配置([[父布局=线性布局6,字体大小=20,粗体=假,@左外边距DP=10,字体颜色=-16777216,可视=真,内容="物品"]])
	变量 文本框2 : 文本框
	@布局配置([[父布局=线性布局6,宽度=-1,@左外边距DP=10,@右外边距DP=50,高度=-1,背景颜色=-1,提示文本="搜索...",内容="",左内边距DP=5,右内边距DP=5,字体大小=17,可视=假,单行显示=真]])
	变量 编辑框1 : 编辑框
	@布局配置([[父布局=相对布局1,高度DP=50,对齐方式=8388629,宽度=-1]])
	变量 线性布局4 : 线性布局
	@布局配置([[父布局=线性布局4,宽度DP=50,高度DP=50,对齐方式=17,水波纹效果=真,纵向布局=真]])
	变量 线性布局7 : 线性布局
	@布局配置([[父布局=线性布局7,宽度DP=25,高度DP=25,图片资源="../../../../资源库/图标/editor/resource_editor/menu.png"]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=线性布局1,宽度=-1,高度=-1]])
	变量 线性布局5 : 线性布局
	@布局配置([[父布局=线性布局5,宽度=-1,高度=-1,分割线高度=0,上内边距DP=5,下内边距DP=5]])
	变量 自定义列表框1 : 自定义列表框

	//声明
	变量 设置_设定  : 设置_设定

	//变量
	变量 列表数组 : 文本集合
	变量 结果数组 : JSON数组

	事件 编辑器_资源编辑器_物品 :创建完毕()
		//设置主题
		本对象.显示标题栏 = 假
		本对象.状态栏颜色 = 0XFFFFFFFF
		本对象.状态栏字体黑色 = 真
		//窗口切换动画
		播放默认切换动画(2)
		//设置夜间模式
		如果 设置_设定.获取开关("NightMode") 则
			设置夜间模式()
		结束 如果
		//设置背景
		变量 设置相关路径 : 文本 = 设置_设定.获取文本("PersonalityBackground")
		如果 设置相关路径.替换(" ","") == "" 则
		否则
			如果 文件是否存在(设置相关路径) 则
				设置_设置.设置布局背景(本对象,线性布局5,设置相关路径)
			结束 如果
		结束 如果
		//退出按钮事件
		事件 退出界面:被单击()
			关闭窗口()
		结束 事件
		//初始化
		如果 文件是否存在(其他_变量.数据目录 + "resource/items.d") 则
			变量 jsonliat : JSON数组 = 读入资源文件(本对象,"resource/items.json")
			加载列表(jsonliat)
		否则
			写出列表图标()
		结束 如果
		//加载方法
		菜单()
		//订阅事件
		订阅事件()
	结束 事件

	//窗口被重新启动时触发该事件
	事件 编辑器_资源编辑器_物品:被重新启动()
		//窗口切换动画
		播放默认切换动画(2)
	结束 事件

	//菜单
	变量 搜索开关 : 逻辑型 = 假
	方法 菜单()
		事件 线性布局7:被单击()
			变量 XPopup : XPopup附着弹窗
			变量 项目 : 文本[] = {"刷新列表","搜索列表"}
			XPopup.列表项目 = 项目
			XPopup.附着组件 = 线性布局7
			XPopup.动画(XPopup动画.滑动_右上)
			XPopup.半透明(假)
			XPopup.亮色状态栏(真)
			//设置夜间模式
			如果 设置_设定.获取开关("NightMode") 则
				XPopup.暗色主题(真)
			结束 如果
			XPopup.显示()
			//项目被点击
			事件 XPopup:列表被单击(索引 : 整数,文本 : 文本)
				假如 索引
					是 0
						变量 jsonliat : JSON数组 = 读入资源文件(本对象,"resource/items.json")
						加载列表(jsonliat)
					是 1
						编辑框1.内容 = ""
						如果 搜索开关 则
							搜索开关 = 假
							编辑框1.可视 = 假
						否则
							搜索开关 = 真
							编辑框1.可视 = 真
						结束 如果
				结束 假如
			结束 事件
		结束 事件
	结束 方法

	//加载列表
	方法 加载列表(数组内容 : JSON数组)
		//初始化
		列表数组.清空()
		//循环
		循环(i, 0, 数组内容.长度)
			列表数组.添加成员(数组内容.取文本(i).到文本())
		结束 循环
		//加载列表
		事件 自定义列表框1:加载布局(索引 : 整数,项目布局 : 组件容器) : 组件容器
			变量 布局 : 编辑器_资源编辑器_物品_列表?
			如果 项目布局 == 空 则
				布局 = 创建 编辑器_资源编辑器_物品_列表
			否则
				布局 = 项目布局
			结束 如果
			//设置列表内容
			变量 Text : 文本 = 列表数组[索引]
			变量 ID : 文本 = 取文件前缀名(Text)
			变量 图片缓存位置 : 文本 = 其他_变量.数据目录 + "resource/items/" + ID + ".png"
			如果 文件是否存在(图片缓存位置) 则
				布局.图片框1.图片路径 = 图标(ID)
			否则
				布局.图片框1.图片资源 = 编辑器_资源编辑器_物品_资源.列表图标
			结束 如果
			布局.文本框1.内容 = Text
			布局.文本框2.内容 = 名称(ID)
			//列表被单击
			事件 布局.线性布局1:被单击()
				变量 资源路径 : 文本 = "resource/items/" + Text
				其他_其他.写缓存("resource_editor_items_path",资源路径)
				切换窗口(编辑器_资源编辑器_物品_编辑)
			结束 事件
			返回 布局
		结束 事件
		//更新列表
		自定义列表框1.更新项目(列表数组.长度)
		//搜索
		事件 编辑框1:内容被改变()
			列表数组.清空()
			循环(i, 0, 数组内容.长度)
				如果 数组内容[i].到文本() ? 编辑框1.内容 则
					列表数组.添加成员(数组内容[i].到文本())
				结束 如果
			结束 循环
			自定义列表框1.更新项目(列表数组.长度)
		结束 事件
	结束 方法

	变量 写出列表图加载 : DX加载

	//写出列表图标资源
	方法 写出列表图标()
		//显示加载
		如果 设置_设定.获取开关("NightMode") 则
			写出列表图加载.主题(DX主题.暗色)
		结束 如果
		写出列表图加载.内容("正在处理中...")
		写出列表图加载.显示()
		//开始执行
		变量 jsonliat : JSON数组 = 读入资源文件(本对象,"resource/items.json")
		提交到新线程运行()
		循环(i, 0, jsonliat.长度)
			延时(50)
			变量 文件名称 : 文本 = jsonliat[i].到文本()
			变量 文件名称2 : 文本 = 取文件前缀名(文件名称) + ".png"
			提交到主线程运行(本对象)
			如果 文件名称2 == "salmon.png" 则
			否则
				写出列表图加载.内容("正在初始化：" + 文件名称2)
				变量 图片缓存位置 : 文本 = 其他_变量.数据目录 + "resource/items/" + 文件名称2
				写出资源文件(本对象,"icon/resource_items/" + 文件名称2,图片缓存位置)
			结束 如果
			结束提交到主线程()
		结束 循环
		写出列表图加载.关闭()
		弹出成功提示("列表图标初始化完成")
		写出文本文件(其他_变量.数据目录 + "resource/items.d","")
		关闭窗口()
		弹出成功通知("初始化完毕，请重新进入")
		结束提交到新线程()
	结束 方法

	方法 图标(filename : 文本) : 文本
		返回 其他_变量.数据目录 + "resource/items/" + filename + ".png"
	结束 方法

	方法 名称(ID : 文本) : 文本
		变量 json : JSON对象 = 读入资源文件(本对象,"editor/resource_editor/items_list.json")
		返回 json[ID].到文本()
	结束 方法

	//设置功能按钮颜色
	方法 设置夜间模式()
		本对象.状态栏颜色 = 0XFF333333
		本对象.状态栏字体黑色 = 假
		线性布局2.背景颜色 = 0XFF333333
		编辑框1.背景颜色 = 0XFF333333
		退出界面.图片资源 = 编辑器_资源编辑器_物品_资源.白色返回图标
		图片框1.图片资源 = 编辑器_资源编辑器_物品_资源.白色菜单图标
		文本框2.字体颜色 = 0XFFFFFFFF
		线性布局5.背景颜色 = 0XFF222222
		编辑框1.提示文本颜色 = 0XFF999999
		编辑框1.字体颜色 = 0XFFFFFFFF
	结束 方法

结束 类


类 编辑器_资源编辑器_物品_编辑 : 窗口

	@布局配置([[根布局=真,宽度=-1,高度=-1]])
	变量 自适应布局1 : 自适应布局
	@布局配置([[父布局=自适应布局1,宽度=-1,高度=-1,@横坐标比例=-9.0E-4,@纵坐标比例=-4.0E-4,纵向布局=真]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度=-1,高度DP=50,背景颜色=-1,纵向布局=假]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,宽度DP=50,高度DP=50,对齐方式=17]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,宽度DP=25,高度DP=25,图片资源="../../../../资源库/图标/back/default_backicon.png",水波纹效果=真,可获取焦点=真]])
	变量 退出界面 : 图片框
	@布局配置([[父布局=线性布局2,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,高度DP=50,对齐方式=8388627,宽度=-1]])
	变量 线性布局6 : 线性布局
	@布局配置([[父布局=线性布局6,字体大小=20,粗体=假,@左外边距DP=10,字体颜色=-16777216,可视=真,内容="物品编辑",@下外边距DP=5]])
	变量 文本框2 : 文本框
	@布局配置([[父布局=相对布局1,高度DP=50,对齐方式=8388629,宽度=-1]])
	变量 线性布局4 : 线性布局
	@布局配置([[父布局=线性布局4,宽度DP=50,高度DP=50,对齐方式=17,水波纹效果=真,纵向布局=真]])
	变量 线性布局7 : 线性布局
	@布局配置([[父布局=线性布局7,宽度DP=25,高度DP=25,图片资源="../../../../资源库/图标/editor/resource_editor/menu.png"]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388691]])
	变量 线性布局8 : 线性布局
	@布局配置([[父布局=线性布局8,@左外边距DP=10,字体颜色=-16777216,字体大小=12,@下外边距DP=3]])
	变量 文本框1 : 文本框
	@布局配置([[父布局=线性布局1,宽度=-1,高度=-1,纵向布局=真,背景颜色=-1,@上外边距DP=0]])
	变量 线性布局5 : 线性布局
	@布局配置([[父布局=线性布局5,宽度=-1,高度DP=40]])
	变量 相对布局2 : 相对布局
	@布局配置([[父布局=相对布局2,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局8s : 线性布局
	@布局配置([[父布局=线性布局8s,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="格式版本"]])
	变量 文本框3 : 文本框
	@布局配置([[父布局=相对布局2,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局9 : 线性布局
	@布局配置([[父布局=线性布局9,@右外边距DP=10,宽度DP=100,背景颜色=16777215,左内边距DP=5,右内边距DP=5,提示文本="请输入...",内容="1.10",字体颜色=-16777216,字体大小=14]])
	变量 编辑框2 : 编辑框
	@布局配置([[父布局=线性布局5,宽度=-1,高度DP=-2,纵向布局=真]])
	变量 线性布局12 : 线性布局
	@布局配置([[父布局=线性布局12,宽度=-1,高度DP=40,对齐方式=8388627]])
	变量 线性布局13 : 线性布局
	@布局配置([[父布局=线性布局13,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="项目"]])
	变量 文本框4 : 文本框
	@布局配置([[父布局=线性布局12,宽度=-1,高度=-2,@左外边距DP=10,纵向布局=真]])
	变量 线性布局14 : 线性布局
	@布局配置([[父布局=线性布局14,宽度=-1,高度DP=40,对齐方式=8388627]])
	变量 线性布局15 : 线性布局
	@布局配置([[父布局=线性布局15,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="描述"]])
	变量 文本框5 : 文本框
	@布局配置([[父布局=线性布局14,宽度=-1,高度=-2,@左外边距DP=10,纵向布局=真]])
	变量 线性布局16 : 线性布局
	@布局配置([[父布局=线性布局16,宽度=-1,高度DP=40]])
	变量 相对布局3 : 相对布局
	@布局配置([[父布局=相对布局3,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局17 : 线性布局
	@布局配置([[父布局=线性布局17,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="标识符"]])
	变量 文本框6 : 文本框
	@布局配置([[父布局=相对布局3,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局18 : 线性布局
	@布局配置([[父布局=线性布局18,@右外边距DP=10,宽度DP=150,背景颜色=16777215,左内边距DP=5,右内边距DP=5,提示文本="请输入标识符",内容="minecraft:chorus_fruit",字体颜色=-16777216,字体大小=14]])
	变量 编辑框4 : 编辑框
	@布局配置([[父布局=线性布局16,宽度=-1,高度DP=40]])
	变量 相对布局4 : 相对布局
	@布局配置([[父布局=相对布局4,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局19 : 线性布局
	@布局配置([[父布局=线性布局19,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="分类"]])
	变量 文本框7 : 文本框
	@布局配置([[父布局=相对布局4,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局20 : 线性布局
	@布局配置([[父布局=线性布局20,@右外边距DP=10,宽度DP=150,背景颜色=16777215,左内边距DP=5,右内边距DP=5,提示文本="请输入分类",内容="Nature",字体颜色=-16777216,字体大小=14]])
	变量 编辑框5 : 编辑框
	@布局配置([[父布局=线性布局12,宽度=-1,高度=-2,@左外边距DP=10,纵向布局=真]])
	变量 线性布局21 : 线性布局
	@布局配置([[父布局=线性布局21,宽度=-1,高度DP=40,对齐方式=8388627]])
	变量 线性布局22 : 线性布局
	@布局配置([[父布局=线性布局22,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="组件"]])
	变量 文本框8 : 文本框
	@布局配置([[父布局=线性布局21,宽度=-1,高度=-2,@左外边距DP=10,纵向布局=真]])
	变量 线性布局23 : 线性布局
	@布局配置([[父布局=线性布局23,宽度=-1,高度DP=40]])
	变量 相对布局5 : 相对布局
	@布局配置([[父布局=相对布局5,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局24 : 线性布局
	@布局配置([[父布局=线性布局24,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="图标"]])
	变量 文本框9 : 文本框
	@布局配置([[父布局=相对布局5,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局25 : 线性布局
	@布局配置([[父布局=线性布局25,@右外边距DP=10,宽度DP=150,背景颜色=16777215,左内边距DP=5,右内边距DP=5,提示文本="请输入图标",内容="chorus_fruit",字体颜色=-16777216,字体大小=14]])
	变量 编辑框6 : 编辑框
	@布局配置([[父布局=线性布局23,宽度=-1,高度DP=40]])
	变量 相对布局6 : 相对布局
	@布局配置([[父布局=相对布局6,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局26 : 线性布局
	@布局配置([[父布局=线性布局26,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="使用动画"]])
	变量 文本框10 : 文本框
	@布局配置([[父布局=相对布局6,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局27 : 线性布局
	@布局配置([[父布局=线性布局27,@右外边距DP=10,宽度DP=150,背景颜色=16777215,左内边距DP=5,右内边距DP=5,提示文本="请输入使用动画",内容="eat",字体颜色=-16777216,字体大小=14]])
	变量 编辑框7 : 编辑框
	@布局配置([[父布局=线性布局23,宽度=-1,高度DP=40]])
	变量 相对布局7 : 相对布局
	@布局配置([[父布局=相对布局7,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局28 : 线性布局
	@布局配置([[父布局=线性布局28,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="悬停文本颜色"]])
	变量 文本框11 : 文本框
	@布局配置([[父布局=相对布局7,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局29 : 线性布局
	@布局配置([[父布局=线性布局29,@右外边距DP=10,宽度DP=150,背景颜色=16777215,左内边距DP=5,右内边距DP=5,提示文本="请输入悬停文本颜色",内容="light_purple",字体颜色=-16777216,字体大小=14]])
	变量 编辑框8 : 编辑框
	@布局配置([[父布局=线性布局23,宽度=-1,高度DP=40]])
	变量 相对布局8 : 相对布局
	@布局配置([[父布局=相对布局8,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局30 : 线性布局
	@布局配置([[父布局=线性布局30,@左外边距DP=10,字体大小=15,字体颜色=-16777216,内容="渲染偏移"]])
	变量 文本框12 : 文本框
	@布局配置([[父布局=相对布局8,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局31 : 线性布局
	@布局配置([[父布局=线性布局31,@右外边距DP=10,宽度DP=150,背景颜色=16777215,左内边距DP=5,右内边距DP=5,提示文本="请输入渲染偏移",内容="bottles",字体颜色=-16777216,字体大小=14]])
	变量 编辑框9 : 编辑框

	//声明
	变量 设置_设定 : 设置_设定

	//组件添加
	变量 图标组件 : 逻辑型
	变量 使用动画组件 : 逻辑型
	变量 悬停文本颜色组件 : 逻辑型
	变量 渲染偏移组件 : 逻辑型

	事件 编辑器_资源编辑器_物品_编辑:创建完毕()
		//设置主题
		本对象.显示标题栏 = 假
		本对象.状态栏颜色 = 0XFFFFFFFF
		本对象.状态栏字体黑色 = 真
		//窗口切换动画
		播放默认切换动画(2)
		//设置夜间模式
		如果 设置_设定.获取开关("NightMode") 则
			设置夜间模式()
		结束 如果
		//设置背景
		变量 设置相关路径 : 文本 = 设置_设定.获取文本("PersonalityBackground")
		如果 设置相关路径.替换(" ","") == "" 则
		否则
			如果 文件是否存在(设置相关路径) 则
				设置_设置.设置布局背景(本对象,线性布局5,设置相关路径)
			结束 如果
		结束 如果
		//退出按钮事件
		事件 退出界面:被单击()
			关闭窗口()
		结束 事件
		//获取名称+是否显示描述
		如果 设置_设定.获取开关("ResourceEditorItemForgsShowDescription") 则
			文本框1.内容 = 取文件名(其他_其他.读缓存("resource_editor_items_path")) + "（" + 名称(取文件前缀名(其他_其他.读缓存("resource_editor_items_path"))) + "）"
		否则
			文本框1.内容 = 取文件名(其他_其他.读缓存("resource_editor_items_path"))
		结束 如果
		//加载方法
		菜单()
		读取(其他_其他.读缓存("resource_editor_items_path"))
		删除组件()
		加载ID选择事件()
		//显示物品原键名
		如果 设置_设定.获取开关("ResourceEditorItemOriginalKeyName") 则
			文本框3.内容 = "format_version"
			文本框4.内容 = "minecraft:item"
			文本框5.内容 = "description"
			文本框6.内容 = "identifier"
			文本框7.内容 = "category"
			文本框8.内容 = "components"
			文本框9.内容 = "minecraft:icon"
			文本框10.内容 = "minecraft:use_animation"
			文本框11.内容 = "minecraft:hover_text_color"
			文本框12.内容 = "minecraft:render_offsets"
		结束 如果
		//订阅事件
		订阅事件()
	结束 事件

	方法 名称(ID : 文本) : 文本
		变量 json : JSON对象 = 读入资源文件(本对象,"editor/resource_editor/items_list.json")
		返回 json[ID].到文本()
	结束 方法

	方法 菜单()
		事件 线性布局7:被单击()
			变量 XPopup : XPopup附着弹窗
			变量 项目 : 文本[] = {"重新加载","新建组件","确定保存"}
			XPopup.列表项目 = 项目
			XPopup.附着组件 = 线性布局7
			XPopup.动画(XPopup动画.滑动_右上)
			XPopup.半透明(假)
			XPopup.亮色状态栏(真)
			//设置夜间模式
			如果 设置_设定.获取开关("NightMode") 则
				XPopup.暗色主题(真)
			结束 如果
			XPopup.显示()
			//项目被点击
			事件 XPopup:列表被单击(索引 : 整数,文本 : 文本)
				假如 索引
					是 0
						读取(其他_其他.读缓存("resource_editor_items_path"))
					是 1
						新建组件()
					是 2
						保存()
				结束 假如
			结束 事件
		结束 事件
	结束 方法

	方法 新建组件()
		变量 XPopup : XPopup附着弹窗
		变量 项目 : 文本[] = {"图标组件","使用动画组件","悬停文本颜色组件","渲染偏移组件"}
		XPopup.列表项目 = 项目
		XPopup.附着组件 = 线性布局7
		XPopup.动画(XPopup动画.滑动_右上)
		XPopup.半透明(假)
		XPopup.亮色状态栏(真)
		//设置夜间模式
		如果 设置_设定.获取开关("NightMode") 则
			XPopup.暗色主题(真)
		结束 如果
		XPopup.显示()
		//项目被点击
		事件 XPopup:列表被单击(索引 : 整数,文本 : 文本)
			假如 索引
				是 0
					如果 图标组件 则
					否则
						图标组件 = 真
						相对布局5.可视 = 真
					结束 如果
				是 1
					如果 使用动画组件 则
					否则
						使用动画组件 = 真
						相对布局6.可视 = 真
					结束 如果
				是 2
					如果 悬停文本颜色组件 则
					否则
						悬停文本颜色组件 = 真
						相对布局7.可视 = 真
					结束 如果
				是 3
					如果 渲染偏移组件 则
					否则
						渲染偏移组件 = 真
						相对布局8.可视 = 真
					结束 如果	
			结束 假如
		结束 事件
	结束 方法

	//读取里面的文件
	方法 读取(json路径 : 文本)
		//变量
		变量 json : JSON对象 = 读入资源文件(本对象,json路径)
		变量 format_version : 文本 = json["format_version"]
		变量 minecraft_item : JSON对象 = json["minecraft:item"]
		变量 description : JSON对象 = minecraft_item["description"]
		变量 identifier : 文本 = description["identifier"]
		变量 category : 文本 = description["category"]
		变量 components : JSON对象 = minecraft_item["components"]
		//设置
		编辑框2.内容 = format_version
		编辑框4.内容 = identifier
		编辑框5.内容 = category
		//判断组件中的内容是否存在
		//图标
		如果 components.是否存在("minecraft:icon") 则
			变量 minecraft_icon : 文本 = components["minecraft:icon"]
			编辑框6.内容 = minecraft_icon
			相对布局5.可视 = 真
			图标组件 = 真
		否则
			编辑框6.内容 = ""
			相对布局5.可视 = 假
			图标组件 = 假
		结束 如果
		//使用动画
		如果 components.是否存在("minecraft:use_animation") 则
			变量 minecraft_use_animation : 文本 = components["minecraft:use_animation"]
			编辑框7.内容 = minecraft_use_animation
			相对布局6.可视 = 真
			使用动画组件 = 真
		否则
			编辑框7.内容 = ""
			相对布局6.可视 = 假
			使用动画组件 = 假
		结束 如果
		//悬停文本颜色
		如果 components.是否存在("minecraft:hover_text_color") 则
			变量 minecraft_hover_text_color : 文本 = components["minecraft:hover_text_color"]
			编辑框8.内容 = minecraft_hover_text_color
			相对布局7.可视 = 真
			悬停文本颜色组件 = 真
		否则
			编辑框8.内容 = ""
			相对布局7.可视 = 假
			悬停文本颜色组件 = 假
		结束 如果
		//渲染偏移
		如果 components.是否存在("minecraft:render_offsets") 则
			变量 minecraft_render_offsets : 文本 = components["minecraft:render_offsets"]
			编辑框9.内容 = minecraft_render_offsets
			相对布局8.可视 = 真
			渲染偏移组件 = 真
		否则
			编辑框9.内容 = ""
			相对布局8.可视 = 假
			渲染偏移组件 = 假
		结束 如果
	结束 方法

	//删除组件
	方法 删除组件()
		//图标组件
		事件 相对布局5:被长按()
			图标组件 = 假
			相对布局5.可视 = 假
			弹出成功通知("当前组件已被删除！")
		结束 事件
		//使用动画组件
		事件 相对布局6:被长按()
			使用动画组件 = 假
			相对布局6.可视 = 假
			弹出成功通知("当前组件已被删除！")
		结束 事件
		//悬停文本颜色组件
		事件 相对布局7:被长按()
			悬停文本颜色组件 = 假
			相对布局7.可视 = 假
			弹出成功通知("当前组件已被删除！")
		结束 事件
		//渲染偏移组件
		事件 相对布局8:被长按()
			渲染偏移组件 = 假
			相对布局8.可视 = 假
			弹出成功通知("当前组件已被删除！")
		结束 事件
	结束 方法

	//保存
	方法 保存()
		变量 根对象 : JSON对象
		根对象["format_version"] = 编辑框2.内容
		变量 minecraft_item : JSON对象
		变量 description : JSON对象
		description["identifier"] = 编辑框4.内容
		description["category"] = 编辑框5.内容
		minecraft_item["description"] = description
		变量 components : JSON对象
		//图标组件
		如果 图标组件 则
			components["minecraft:icon"] = 编辑框6.内容
		结束 如果
		//使用动画组件
		如果 使用动画组件 则
			components["minecraft:use_animation"] = 编辑框7.内容
		结束 如果
		//悬停文本颜色组件
		如果 悬停文本颜色组件 则
			components["minecraft:hover_text_color"] = 编辑框8.内容
		结束 如果
		//渲染偏移组件
		如果 渲染偏移组件 则
			components["minecraft:render_offsets"] = 编辑框9.内容
		结束 如果
		//minecraft:item
		minecraft_item["components"] = components
		根对象["minecraft:item"] = minecraft_item
		//输出
		变量 文件名称 : 文本 = 取文件名(其他_其他.读缓存("resource_editor_items_path"))
		变量 输出路径 : 文本 = 其他_变量.项目目录 + 其他_其他.读缓存("ProjectName") + "/resource/items/" + 文件名称
		//检测是否开启强制覆盖
		如果 设置_设定.获取开关("ResourceEditorItemForgsForceOverride") 则
			写出文本文件(输出路径,根对象.到文本(4))
			弹出成功通知("文件保存完毕！")
		否则
			如果 文件是否存在(输出路径) 则
				变量 覆盖提示 : DX通知
				//设置夜间模式
				如果 设置_设定.获取开关("NightMode") 则
					覆盖提示.主题(DX主题.暗色)
				结束 如果
				覆盖提示.警告图标()
				覆盖提示.标题("提示")
				覆盖提示.内容("你的物品中有相同的文件，是否覆盖它")
				覆盖提示.按钮("覆盖")
				覆盖提示.显示()
				事件 覆盖提示:按钮被单击() : 逻辑型
					写出文本文件(输出路径,根对象.到文本(4))
					项目记录(输出路径)
					弹出成功通知("文件覆盖完毕！")
					返回 假
				结束 事件
			否则
				写出文本文件(输出路径,根对象.到文本(4))
				项目记录(输出路径)
				弹出成功通知("文件保存完毕！")
			结束 如果
		结束 如果
	结束 方法

	//加载ID选择
	方法 加载ID选择事件()
		//分类
		事件 编辑框5:被单击()
			变量 ID选择器 : 其他_选择_ID
			ID选择器.打开(编辑框5,"category",真)
		结束 事件
		//使用动画
		事件 编辑框7:被单击()
			变量 ID选择器 : 其他_选择_ID
			ID选择器.打开(编辑框7,"food_use_animation")
		结束 事件
	结束 方法

	//项目记录
	方法 项目记录(路径 : 文本)
		//项目记录
		变量 模块_项目 : 模块_项目
		模块_项目.初始化()
		模块_项目.assets图标 = "icon/item/json.png"
		模块_项目.名称 = 取文件前缀名(路径)
		模块_项目.标识符 = 取文件前缀名(路径)
		模块_项目.描述 = "这个是资源包物品"
		模块_项目.种类 = 模块_项目种类.资源包
		模块_项目.分类 = "items"
		模块_项目.路径 = 路径
		模块_项目.保存()
	结束 方法

	//设置夜间模式
	方法 设置夜间模式()
		本对象.状态栏颜色 = 0XFF333333
		本对象.状态栏字体黑色 = 假
		线性布局2.背景颜色 = 0XFF333333
		退出界面.图片资源 = 编辑器_资源编辑器_物品_资源.白色返回图标
		图片框1.图片资源 = 编辑器_资源编辑器_物品_资源.白色菜单图标
		文本框1.字体颜色 = 0XFFFFFFFF
		线性布局5.背景颜色 = 0XFF222222
		文本框2.字体颜色 = 0XFFFFFFFF
		文本框3.字体颜色 = 0XFFFFFFFF
		文本框5.字体颜色 = 0XFFFFFFFF
		文本框4.字体颜色 = 0XFFFFFFFF
		文本框6.字体颜色 = 0XFFFFFFFF
		文本框7.字体颜色 = 0XFFFFFFFF
		文本框8.字体颜色 = 0XFFFFFFFF
		文本框9.字体颜色 = 0XFFFFFFFF
		文本框10.字体颜色 = 0XFFFFFFFF
		文本框11.字体颜色 = 0XFFFFFFFF
		文本框12.字体颜色 = 0XFFFFFFFF
		编辑框2.提示文本颜色 = 0XFF999999
		编辑框2.字体颜色 = 0XFFFFFFFF
		编辑框4.提示文本颜色 = 0XFF999999
		编辑框4.字体颜色 = 0XFFFFFFFF
		编辑框5.提示文本颜色 = 0XFF999999
		编辑框5.字体颜色 = 0XFFFFFFFF
		编辑框6.提示文本颜色 = 0XFF999999
		编辑框6.字体颜色 = 0XFFFFFFFF
		编辑框7.提示文本颜色 = 0XFF999999
		编辑框7.字体颜色 = 0XFFFFFFFF
		编辑框8.提示文本颜色 = 0XFF999999
		编辑框8.字体颜色 = 0XFFFFFFFF
		编辑框9.提示文本颜色 = 0XFF999999
		编辑框9.字体颜色 = 0XFFFFFFFF
	结束 方法

结束 类

类 编辑器_资源编辑器_物品_列表 : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度=-2,水波纹效果=真]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度=-1,高度DP=45,圆角=1,@左外边距DP=5,@右外边距DP=5,卡片阴影=0]])
	变量 卡片布局1 : 卡片布局
	@布局配置([[父布局=卡片布局1,宽度=-1,高度=-1,背景颜色=-1,水波纹效果=真]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,宽度DP=45,高度=-1,对齐方式=17]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,宽度DP=30,高度DP=30]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=线性布局2,宽度=-1,高度=-1,对齐方式=8388627,纵向布局=真]])
	变量 线性布局4 : 线性布局
	@布局配置([[父布局=线性布局4,@左外边距DP=5,字体大小=14,字体颜色=-16777216,单行显示=真]])
	变量 文本框1 : 文本框
	@布局配置([[父布局=线性布局4,@左外边距DP=5,字体大小=11,字体颜色=-16777216,单行显示=真,@上外边距DP=2]])
	变量 文本框2 : 文本框

	//声明
	变量 设置_设定 : 设置_设定

	事件 编辑器_资源编辑器_物品_列表:创建完毕()
		//设置夜间模式
		如果 设置_设定.获取开关("NightMode") 则
			设置夜间模式()
		结束 如果
	结束 事件

	//设置功能按钮颜色
	方法 设置夜间模式()
		卡片布局1.卡片背景颜色 = 0XFF333333
		线性布局2.背景颜色 = 0XFF333333
		文本框1.字体颜色 = 0XFFFFFFFF
		文本框2.字体颜色 = 0XFFFFFFFF
	结束 方法

结束 类


类 编辑器_资源编辑器_物品_资源

	@静态
	变量 白色返回图标 : 图片资源 =  "../../../../资源库/图标/back/default_backicon2.png"

	@静态
	变量 白色菜单图标 : 图片资源 =  "../../../../资源库/图标/editor/resource_editor/menu2.png"

	@静态
	变量 列表图标 : 图片资源 =  "../../../../资源库/图标/editor/resource_editor/items/list_no.png"

结束 类