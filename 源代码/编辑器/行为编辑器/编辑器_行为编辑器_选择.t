类 编辑器_行为编辑器_选择 : 窗口

	@布局配置([[根布局=真,宽度=-1,高度=-1]])
	变量 自适应布局1 : 自适应布局
	@布局配置([[父布局=自适应布局1,宽度=-1,高度=-1,@横坐标比例=-9.0E-4,@纵坐标比例=-4.0E-4,纵向布局=真]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度=-1,高度DP=50,背景颜色=-1,纵向布局=假]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,宽度DP=50,高度DP=50,对齐方式=17]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,宽度DP=25,高度DP=25,图片资源="../../../../资源库/图标/back/default_backicon.png",水波纹效果=真,可获取焦点=真]])
	变量 退出界面 : 图片框
	@布局配置([[父布局=线性布局2,宽度=-1,高度=-1]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,高度DP=50,对齐方式=8388627,宽度=-1]])
	变量 线性布局6 : 线性布局
	@布局配置([[父布局=线性布局6,字体大小=20,粗体=假,@左外边距DP=10,字体颜色=-16777216,可视=真,内容="标题",@下外边距DP=5]])
	变量 文本框2 : 文本框
	@布局配置([[父布局=线性布局6,宽度=-1,@左外边距DP=10,@右外边距DP=50,高度=-1,背景颜色=-1,提示文本="搜索项名称",内容="",左内边距DP=5,右内边距DP=5,字体大小=17,可视=假,单行显示=真]])
	变量 编辑框1 : 编辑框
	@布局配置([[父布局=相对布局1,高度DP=50,对齐方式=8388629,宽度=-1]])
	变量 线性布局4 : 线性布局
	@布局配置([[父布局=线性布局4,宽度DP=50,高度DP=50,对齐方式=17,水波纹效果=真,纵向布局=真]])
	变量 线性布局7 : 线性布局
	@布局配置([[父布局=线性布局7,宽度DP=25,高度DP=25,图片资源="../../../../资源库/图标/editor/resource_editor/menu.png"]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388691]])
	变量 线性布局8 : 线性布局
	@布局配置([[父布局=线性布局8,@左外边距DP=10,字体颜色=-16777216,字体大小=12,@下外边距DP=3]])
	变量 文本框1 : 文本框
	@布局配置([[父布局=线性布局1,宽度=-1,高度=-1]])
	变量 线性布局5 : 线性布局
	@布局配置([[父布局=线性布局5,宽度=-1,高度=-1,分割线高度=0,上内边距DP=5,下内边距DP=5,始终显示快速滚动条=真]])
	变量 自定义列表框1 : 自定义列表框

	//声明
	变量 设置_设定  : 设置_设定

	变量 列表集合 : 文本集合
	变量 结束集合 : 文本集合

	变量 活动路径 : 文本
	变量 项目活动路径 : 文本

	事件 编辑器_行为编辑器_选择:创建完毕()
		//设置主题
		本对象.显示标题栏 = 假
		本对象.状态栏颜色 = 0XFFFFFFFF
		本对象.状态栏字体黑色 = 真
		//窗口切换动画
		播放默认切换动画(2)
		//设置夜间模式
		如果 设置_设定.获取开关("NightMode") 则
			设置夜间模式()
		结束 如果
		//设置背景
		变量 设置相关路径 : 文本 = 设置_设定.获取文本("PersonalityBackground")
		如果 设置相关路径.替换(" ","") == "" 则
		否则
			如果 文件是否存在(设置相关路径) 则
				设置_设置.设置布局背景(本对象,线性布局5,设置相关路径)
			结束 如果
		结束 如果
		//退出按钮事件
		事件 退出界面:被单击()
			关闭窗口()
		结束 事件
		//加载列表
		变量 项目路径列表 : 文本 = 其他_变量.数据目录 + 其他_其他.读缓存("behaviour_editor_path")
		项目活动路径 = 项目路径列表
		如果 文件是否存在(项目路径列表) 则
			加载列表(项目路径列表)
		结束 如果
		//加载方法
		菜单()
		//订阅事件
		订阅事件()
	结束 事件

	//窗口被重新启动时触发该事件
	事件 编辑器_行为编辑器_选择:被重新启动()
		//窗口切换动画
		播放默认切换动画(2)
	结束 事件

	@虚拟方法
	方法 返回键被按下()
		变量 项目路径列表 : 文本 = 其他_变量.数据目录 + 其他_其他.读缓存("behaviour_editor_path")
		如果 活动路径 == 项目路径列表 则
			关闭窗口()
		否则
			变量 wj : 文件 = 活动路径
			变量 flj : 文本 = wj.取父目录路径()
			加载列表(flj,真)
		结束 如果
	结束 方法

	//菜单
	变量 搜索开关 : 逻辑型 = 假
	变量 文件列表list : 文本 = ""
	方法 菜单()
		事件 线性布局7:被单击()
			变量 XPopup : XPopup附着弹窗
			变量 项目 : 文本[] = {"刷新列表","搜索列表","统计分享","打包分享","打包导出"}
			XPopup.列表项目 = 项目
			XPopup.附着组件 = 线性布局7
			XPopup.动画(XPopup动画.滑动_右上)
			XPopup.半透明(假)
			XPopup.亮色状态栏(真)
			//设置夜间模式
			如果 设置_设定.获取开关("NightMode") 则
				XPopup.暗色主题(真)
			结束 如果
			XPopup.显示()
			//项目被点击
			事件 XPopup:列表被单击(索引 : 整数,文本 : 文本)
				假如 索引
					是 0
						加载列表(活动路径,真)
					是 1
						编辑框1.内容 = ""
						如果 搜索开关 则
							搜索开关 = 假
							编辑框1.可视 = 假
						否则
							搜索开关 = 真
							编辑框1.可视 = 真
						结束 如果
					是 2
						变量 textn : 文本 = "\n"
						变量 text1 : 文本 = "《统计分享》"
						变量 text2 : 文本 = "项目名称：" + 其他_其他.读缓存("behaviour_editor_name")
						变量 text3 : 文本 = "项目文件：" + 取文件名(其他_其他.读缓存("behaviour_editor_path"))
						变量 text4 : 文本 = "项目数量：" + 列表集合.长度
						变量 text5 : 文本 = "文件列表：" + textn
						变量 texte : 文本 = "[--------------------------------------]"
						循环(i, 0, 列表集合.长度)
							文件列表list = 文件列表list + 取文件名(列表集合[i]) + "\n"
						结束 循环
						变量 结果 : 文本 = text1 + textn + text2 + textn + text3 + textn + text4 + textn + text5 + textn + 文件列表list + textn + texte
						分享操作.分享文本(本对象,结果)
					是 3
						变量 打包保存位置 : 文本 = 其他_变量.缓存目录 + "behaviour/" + 取文件名(其他_其他.读缓存("behaviour_editor_path")) + ".zip"
						写出文本文件(打包保存位置,"")
						删除文件(打包保存位置)
						变量 项目路径文件目录 : 文本 = 其他_变量.数据目录 + 其他_其他.读缓存("behaviour_editor_path")
						如果 ZIP压缩(项目路径文件目录,打包保存位置) 则
							分享操作.分享文件(本对象,打包保存位置)
						否则
							弹出错误提示("正在准备分享时出错了")
						结束 如果
					是 4
						变量 设置文件内的路径 : 文本 = 设置_设定.获取文本("BehaviourEditorCustomPackagingExportPath")
						如果 设置文件内的路径.替换(" ","") == "" 则
							变量 打包保存位置 : 文本 = 其他_变量.内部存储目录 + "打包分享的内容.zip"
							变量 项目路径文件目录 : 文本 = 其他_变量.数据目录 + 其他_其他.读缓存("behaviour_editor_path")
							如果 ZIP压缩(项目路径文件目录,打包保存位置) 则
								弹出成功提示("©打包导出成功！\n" + 打包保存位置)
							否则
								弹出错误提示("©打包导出失败！")
							结束 如果
						否则
							变量 打包保存位置 : 文本 = 设置文件内的路径 + "/打包分享的内容.zip"
							变量 项目路径文件目录 : 文本 = 其他_变量.数据目录 + 其他_其他.读缓存("behaviour_editor_path")
							如果 ZIP压缩(项目路径文件目录,打包保存位置) 则
								弹出成功提示("打包导出成功！\n" + 打包保存位置)
							否则
								弹出错误提示("打包导出失败！")
							结束 如果
						结束 如果
				结束 假如
			结束 事件
		结束 事件
	结束 方法

	方法 加载列表(路径:文本,刷新:逻辑型=假)
		活动路径 = 路径
		如果 刷新 则
			列表集合 = 文件操作.取子文件集合(活动路径)
			自定义列表框1.更新项目(列表集合.长度)
		否则
			//加载自定义列表
			事件 自定义列表框1:加载布局(索引 : 整数,项目布局 : 组件容器) : 组件容器
				变量 布局 : 编辑器_行为编辑器_列表?
				如果 项目布局 == 空 则
					布局 = 创建 编辑器_行为编辑器_列表
				否则
					布局 = 项目布局
				结束 如果
				//显示到列表
				变量 文件路径 : 文本 = 列表集合[索引]
				如果 是否为目录(文件路径) 则
					布局.图片框1.图片资源 = 编辑器_行为编辑器_资源.文件夹
				否则
					如果 取文件后缀名(文件路径).到小写() == "json" 则
						布局.图片框1.图片资源 = 编辑器_行为编辑器_资源.文件
					否则
						布局.图片框1.图片资源 = 编辑器_行为编辑器_资源.未知
					结束 如果
				结束 如果
				布局.文本框1.内容 = 取文件名(文件路径)
				布局.文本框2.内容 = 取文件修改时间(文件路径) + " - " + 其他_转换.转换文件大小(取文件大小(文件路径))
				//列表被点击
				事件 布局.相对布局1:被单击()
					如果 是否为目录(文件路径) 则
						加载列表(文件路径,真)
					否则
						变量 转为可以保存的路径 : 文本 = 文件路径.替换(其他_变量.数据目录 + "behaviour/","")
						其他_其他.写缓存("behaviour_editor_outputpath",转为可以保存的路径)
						假如 设置_设定.获取整数("BehaviourEditorSelectListOpenMode")
							是 0
								列表菜单(文件路径)
							是 1
								其他_其他.写缓存("behaviour_editor_path_code",文件路径)
								切换窗口(编辑器_行为编辑器_编辑)
							是 2
								文件打开方式.打开文件(本对象,文件路径)
						结束 假如
					结束 如果
				结束 事件
				//列表被长按
				事件 布局.相对布局1:被长按()
					如果 是否为目录(文件路径) 则
					否则
						//是否支持预览
						如果 设置_设定.获取开关("BehaviourEditorSelectListPreview") 则
							变量 查看预览菜单 : DX底部对话框
							如果 设置_设定.获取开关("NightMode") 则
								查看预览菜单.主题(DX主题.暗色)
							结束 如果
							查看预览菜单.标题("查看预览：" + 取文件前缀名(文件路径))
							查看预览菜单.内容(读入文本文件(文件路径))
							查看预览菜单.按钮1("关闭")
							查看预览菜单.按钮2("复制")
							查看预览菜单.显示()
							事件 查看预览菜单:按钮1被单击() : 逻辑型
								查看预览菜单.关闭()
								返回 假
							结束 事件
							事件 查看预览菜单:按钮2被单击() : 逻辑型
								置剪切板文本(本对象,读入文本文件(文件路径))
								返回 假
							结束 事件
						结束 如果
					结束 如果
				结束 事件
				返回 布局
			结束 事件
			列表集合 = 文件操作.取子文件集合(活动路径)
			自定义列表框1.更新项目(列表集合.长度)
			//编辑框搜索
			事件 编辑框1:内容被改变()
				列表集合 = 搜索(文件操作.取子文件集合(活动路径),编辑框1.内容)
				自定义列表框1.更新项目(列表集合.长度)
			结束 事件
		结束 如果
		//设置标题和描述
		文本框2.内容 = 其他_其他.读缓存("behaviour_editor_name")
		文本框1.内容 = "项目名：" + 取文件名(项目活动路径) + " 项目数量：" + 列表集合.长度.到文本()
	结束 方法

	方法 列表菜单(文件路径 : 文本)
		变量 XPopup : XPopup列表弹窗
		XPopup.标题 = "菜单"
		变量 项目 : 文本[] = {"统计信息","查看预览","可视预览","编辑修改","其他方式","内容分享","文件分享"}
		XPopup.列表项目 = 项目
		XPopup.动画(XPopup动画.平移_上进入)
		XPopup.半透明(假)
		XPopup.亮色状态栏(真)
		//设置夜间模式
		如果 设置_设定.获取开关("NightMode") 则
			XPopup.暗色主题(真)
		结束 如果
		XPopup.显示()
		//项目被点击
		事件 XPopup:列表被单击(索引 : 整数,文本 : 文本)
			假如 索引
				是 0
					变量 文件属性 : 其他_工具_文件属性
					文件属性.打开(文件路径)
				是 1
					变量 查看预览菜单 : DX底部对话框
					如果 设置_设定.获取开关("NightMode") 则
						查看预览菜单.主题(DX主题.暗色)
					结束 如果
					查看预览菜单.标题("查看预览--->" + 取文件前缀名(文件路径))
					查看预览菜单.内容(读入文本文件(文件路径))
					查看预览菜单.按钮1("关闭")
					查看预览菜单.按钮2("复制")
					查看预览菜单.显示()
					事件 查看预览菜单:按钮1被单击() : 逻辑型
						查看预览菜单.关闭()
						返回 假
					结束 事件
					事件 查看预览菜单:按钮2被单击() : 逻辑型
						置剪切板文本(本对象,读入文本文件(文件路径))
						返回 假
					结束 事件
				是 2
					其他_其他.写缓存("behaviour_editor_path_code",文件路径)
					切换窗口(编辑器_行为编辑器_可视)
				是 3
					其他_其他.写缓存("behaviour_editor_path_code",文件路径)
					切换窗口(编辑器_行为编辑器_编辑)
				是 4
					文件打开方式.打开文件(本对象,文件路径)
				是 5
					分享操作.分享文本(本对象,读入文本文件(文件路径))
				是 6
					分享操作.分享文件(本对象,文件路径)			
			结束 假如
		结束 事件
	结束 方法

	//搜索
	方法 搜索(项目集合 : 文本集合,搜索内容 : 文本) : 文本集合
		结束集合.清空()
		循环(项目集合 -> 项目)
			如果 项目.到文本() ? 搜索内容 则
				结束集合.添加成员(项目)
			结束 如果
		结束 循环
		返回 结束集合
	结束 方法

	//设置功能按钮颜色
	方法 设置夜间模式()
		本对象.状态栏颜色 = 0XFF333333
		本对象.状态栏字体黑色 = 假
		线性布局2.背景颜色 = 0XFF333333
		编辑框1.背景颜色 = 0XFF333333
		退出界面.图片资源 = 编辑器_行为编辑器_资源.白色返回图标
		图片框1.图片资源 = 编辑器_行为编辑器_资源.白色菜单图标
		文本框1.字体颜色 = 0XFFFFFFFF
		文本框2.字体颜色 = 0XFFFFFFFF
		线性布局5.背景颜色 = 0XFF222222
		编辑框1.提示文本颜色 = 0XFF999999
		编辑框1.字体颜色 = 0XFFFFFFFF
	结束 方法

结束 类

类 编辑器_行为编辑器_列表 : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度DP=50,背景颜色=-1,水波纹效果=真]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388627,@左外边距DP=10,@右外边距DP=10]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度DP=45,高度DP=45,对齐方式=17]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,宽度DP=35,高度DP=35]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=线性布局1,宽度=-1,高度=-1,对齐方式=8388627,纵向布局=真]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,字体颜色=-16777216,字体大小=15,内容="文件名称",@左外边距DP=5,@右外边距DP=20]])
	变量 文本框1 : 文本框
	@布局配置([[父布局=线性布局3,字体大小=12,内容="文件相关信息",@上外边距DP=3,@左外边距DP=5,@右外边距DP=20]])
	变量 文本框2 : 文本框
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局4 : 线性布局

	//声明
	变量 设置_设定 : 设置_设定

	事件 编辑器_行为编辑器_列表 : 创建完毕()
		//加载夜间模试
		如果 设置_设定.获取开关("NightMode") 则
			设置夜间模式()
		结束 如果
	结束 事件

	//设置功能按钮颜色
	方法 设置夜间模式()
		相对布局1.背景颜色 = 0XFF333333
		文本框1.字体颜色 = 0XFFFFFFFF
		文本框2.字体颜色 = 0XFFFFFFFF
	结束 方法

结束 类