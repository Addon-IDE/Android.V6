类 插件 : 窗口

	@布局配置([[根布局=真,宽度=-1,高度=-1,纵向布局=真]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度=-1,高度DP=50,对齐方式=8388627,背景颜色=-1]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,宽度DP=15,高度DP=15,图片资源="../../资源库/图标/back/Back_black.png",@左外边距DP=10]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=线性布局2,字体大小=15,内容="项目",字体颜色=-16777216]])
	变量 文本框2 : 文本框
	@布局配置([[父布局=线性布局2,宽度DP=2,高度DP=12,@左外边距DP=10,卡片阴影=0,卡片背景颜色=16251129]])
	变量 卡片布局1 : 卡片布局
	@布局配置([[父布局=卡片布局1,宽度=-1,高度=-1,背景颜色=-526087]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局2,@左外边距DP=10,粗体=真,字体大小=16,内容="插件",字体颜色=-16777216]])
	变量 文本框3 : 文本框
	@布局配置([[父布局=线性布局1,宽度=-1,高度=-1,纵向布局=真]])
	变量 线性布局4 : 线性布局
	@布局配置([[父布局=线性布局4,宽度=-1,高度=-1,分割线高度=0,右内边距DP=5,下内边距DP=5,上内边距DP=5,左内边距DP=5,可用=真]])
	变量 自定义列表框1 : 自定义列表框

	//变量
	变量 内部存储目录 : 文本 = 存储卡操作.取存储卡路径()
	变量 插件目录 : 文本 = 其他_变量.插件目录

	//声明
	变量 列表集合 : 文本集合
	变量 设置_设定 : 设置_设定

	事件 插件:创建完毕()
		//设置主题
		本对象.显示标题栏 = 假
		本对象.状态栏颜色 = 0XFFFFFFFF
		本对象.状态栏字体黑色 = 真
		//窗口切换动画
		播放默认切换动画(2)
		//订阅事件
		订阅事件()
		//退出事件功能
		事件 图片框1: 被单击()
			关闭窗口()
		结束 事件
		事件 文本框2: 被单击()
			关闭窗口()
		结束 事件
		//设置夜间模式
		如果 设置_设定.获取开关("NightMode") 则
			设置夜间模式()
		结束 如果
		//设置背景
		变量 设置相关路径 : 文本 = 设置_设定.获取文本("PersonalityBackground")
		如果 设置相关路径.替换(" ","") == "" 则
		否则
			如果 文件是否存在(设置相关路径) 则
				设置_设置.设置布局背景(本对象,线性布局4,设置相关路径)
			结束 如果
		结束 如果
		//加载列表
		加载列表(插件目录)
	结束 事件

	//窗口被重新启动时触发该事件
	事件 插件:被重新启动()
		//窗口切换动画
		播放默认切换动画(2)
	结束 事件

	//设置功能按钮颜色
	方法 设置夜间模式()
		本对象.状态栏颜色 = 0XFF333333
		本对象.状态栏字体黑色 = 假
		线性布局2.背景颜色 = 0XFF333333
		线性布局3.背景颜色 = 0XFF222222
		卡片布局1.卡片背景颜色 = 0XFF222222
		文本框2.字体颜色 = 0XFFFFFFFF
		文本框3.字体颜色 = 0XFFFFFFFF
		线性布局4.背景颜色 = 0XFF222222
		图片框1.图片资源 = 其他_资源.白色返回图标
	结束 方法

	//
	方法 加载列表(路径 : 文本)
		事件 自定义列表框1:加载布局(索引 : 整数,项目布局 : 组件容器) : 组件容器
			变量 布局 : 插件_列表?
			如果 项目布局 == 空 则
				布局 = 创建 插件_列表
			否则
				布局 = 项目布局
			结束 如果
			//显示到列表
			变量 文件路径 : 文本 = 列表集合[索引]
			布局.文件夹路径文本.内容 = 文件路径
			如果 是否为目录(文件路径) 则
				变量 清单文件 : 文本 = 读入文本文件(文件路径 + "/manifest.json")
				变量 json : JSON对象 = 清单文件
				布局.文本框1.内容 = json["Name"].到文本()
				布局.文本框3.内容 = json["Describe"].到文本()
				布局.文本框6.内容 = json["Version"].到文本()
				布局.文本框8.内容 = json["Author"].到文本()
			否则
				布局.文本框1.内容 = "异常" + 取文件名(文件路径) + "插件"
				布局.文本框3.内容 = "检测到此插件为未知插件,因此无法加载!"
				布局.文本框6.内容 = "无法获取"
				布局.文本框8.内容 = "无法获取"
				布局.图片框1.可视 = 假
			结束 如果
			//项目被点击
			事件 布局.图片框1:被单击()
				变量 XPopup : XPopup附着弹窗
				变量 项目 : 文本[] = {"启动","设置","卸载"}
				XPopup.列表项目 = 项目
				XPopup.附着组件 = 布局.图片框1
				XPopup.动画(XPopup动画.滑动_右上)
				XPopup.半透明(假)
				XPopup.亮色状态栏(真)
				//设置夜间模式
				如果 设置_设定.获取开关("NightMode") 则
					XPopup.暗色主题(真)
				结束 如果
				XPopup.显示()
				//项目被点击
				事件 XPopup:列表被单击(索引 : 整数,文本 : 文本)
					假如 索引
						是 0
							
						是 1
							
						是 2		
					结束 假如
				结束 事件
			结束 事件
			返回 布局
		结束 事件
		//转换为集合
		列表集合 = 文件操作.取子文件集合(路径)
		自定义列表框1.更新项目(列表集合.长度)
	结束 方法
	
	//启动
	方法 启动插件()
		
	结束 方法

结束 类

类 插件_列表 : 组件容器

	@布局配置([[根布局=真,宽度=-1,高度=-2,背景颜色=16777215]])
	变量 线性布局1 : 线性布局
	@布局配置([[父布局=线性布局1,宽度=-1,高度=-2,@左外边距DP=5,@右外边距DP=5,圆角=15,卡片阴影=0,@上外边距DP=5]])
	变量 卡片布局1 : 卡片布局
	@布局配置([[父布局=卡片布局1,宽度=-1,高度=-1,纵向布局=真,背景颜色=-1,对齐方式=17,水波纹效果=真]])
	变量 线性布局2 : 线性布局
	@布局配置([[父布局=线性布局2,宽度=-1,高度DP=45]])
	变量 相对布局1 : 相对布局
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局3 : 线性布局
	@布局配置([[父布局=线性布局3,宽度DP=4,高度DP=15,@左外边距DP=10,卡片阴影=0]])
	变量 卡片布局2 : 卡片布局
	@布局配置([[父布局=卡片布局2,宽度=-1,高度=-1,背景颜色=-65536]])
	变量 线性布局5 : 线性布局
	@布局配置([[父布局=线性布局3,@左外边距DP=5,内容="插件标题",字体大小=17,粗体=真,单行显示=真,字体颜色=-16777216]])
	变量 文本框1 : 文本框
	@布局配置([[父布局=相对布局1,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局4 : 线性布局
	@布局配置([[父布局=线性布局4,宽度DP=25,高度DP=25,图片资源="../../资源库/图标/mian/plugin/menu.png",@右外边距DP=10]])
	变量 图片框1 : 图片框
	@布局配置([[父布局=线性布局2,对齐方式=17,宽度=-1,高度=3,字体颜色=-526087,背景颜色=-526087,@左外边距DP=10,@右外边距DP=10]])
	变量 文本框2 : 文本框
	@布局配置([[父布局=线性布局2,宽度=-1,高度=-2,对齐方式=8388627]])
	变量 线性布局6 : 线性布局
	@布局配置([[父布局=线性布局6,@左外边距DP=10,@上外边距DP=8,@下外边距DP=8,@右外边距DP=10,字体颜色=-16777216,内容="我是该插件的描述",字体大小=15]])
	变量 文本框3 : 文本框
	@布局配置([[父布局=线性布局2,对齐方式=17,宽度=-1,高度=3,字体颜色=-526087,背景颜色=-526087,@左外边距DP=10,@右外边距DP=10]])
	变量 文本框4 : 文本框
	@布局配置([[父布局=线性布局2,宽度=-1,高度DP=30]])
	变量 相对布局2 : 相对布局
	@布局配置([[父布局=相对布局2,宽度=-1,高度=-1,对齐方式=8388627]])
	变量 线性布局7 : 线性布局
	@布局配置([[父布局=线性布局7,@左外边距DP=10,内容="版本: "]])
	变量 文本框5 : 文本框
	@布局配置([[父布局=线性布局7,内容="V1.0"]])
	变量 文本框6 : 文本框
	@布局配置([[父布局=相对布局2,宽度=-1,高度=-1,对齐方式=8388629]])
	变量 线性布局8 : 线性布局
	@布局配置([[父布局=线性布局8,内容="作者: "]])
	变量 文本框7 : 文本框
	@布局配置([[父布局=线性布局8,@左外边距DP=0,内容="AddonIDE官方团队",@右外边距DP=10]])
	变量 文本框8 : 文本框
	@布局配置([[父布局=卡片布局1,可视=假]])
	变量 文件夹路径文本 : 文本框

	变量 设置_设定 : 设置_设定

	事件 插件_列表:创建完毕()
		//设置夜间模式
		如果 设置_设定.获取开关("NightMode") 则
			设置夜间模式()
		结束 如果
	结束 事件

	方法 设置夜间模式()
		线性布局2.背景颜色 = 0XFF333333
		卡片布局1.卡片背景颜色 = 0XFF333333 
		文本框2.背景颜色 = 0XFF222222
		文本框4.背景颜色 = 0XFF222222
		文本框1.字体颜色 = 0XFFFFFFFF
		文本框3.字体颜色 = 0XFFFFFFFF
		文本框5.字体颜色 = 0XFFFFFFFF
		文本框6.字体颜色 = 0XFFFFFFFF
		文本框7.字体颜色 = 0XFFFFFFFF
		文本框8.字体颜色 = 0XFFFFFFFF
		图片框1.图片资源 = 插件_资源.白色菜单图标
	结束 方法

结束 类

类 插件_资源

	@静态
	变量 白色菜单图标 : 图片资源 = "../../资源库/图标/mian/plugin/menu2.png"

结束 类